//
//  BooksListInteractor.swift
//  BooksArchiveDemo
//
//  Created by kamalraj venkatesan on 14/08/19.
//  Copyright (c) 2019 kamalraj venkatesan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BooksListBusinessLogic
{
    func getBooks(request: BooksList.getBooks.Request)
}

protocol BooksListDataStore
{
    var books: [Book]? { get set }
}

class BooksListInteractor: BooksListBusinessLogic, BooksListDataStore
{
    var presenter: BooksListPresentationLogic?
    var worker: BooksListWorker?
    
    var books: [Book]?
    
    // MARK: Get Books
    func getBooks(request: BooksList.getBooks.Request)
    {
        worker = BooksListWorker()
        worker?.getAllBooks(completion: { [weak self] (books, error, statusCode) in
            
            self?.books = books
            
            guard error == nil, books != nil else {
                // Error
                self?.presenter?.presentPlaceholder(show: true, type: (error == BookssAppErrors.NoInternet) ? PlaceholderType.noInternet : PlaceholderType.somethingWentWrong )
                return
            }
            
            guard !books!.isEmpty else {
                // Books List is Empty
                self?.presenter?.presentPlaceholder(show: true, type: .noResult)
                return
            }
            
            // Books Available
            self?.presenter?.presentPlaceholder(show: false, type: nil) // Hiding Placeholder view
            
            let response = BooksList.getBooks.Response(books: books!)
            self?.presenter?.presentBooks(response: response)
        })
        
    }
}
